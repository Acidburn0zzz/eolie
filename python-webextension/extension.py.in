# Copyright (c) 2014-2016 Cedric Bellegarde <cedric.bellegarde@adishatz.org>
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.

import sys
# Make sure we'll find the pygobject module, even in JHBuild
sys.path.insert(1, '@pyexecdir@')
# Make sure we'll find the eolie modules, even in JHBuild
sys.path.insert(1, '@pythondir@')

import gi
gi.require_version('Secret', '1')
from gi.repository import Gio, Secret

from urllib.parse import urlparse

from eolie.settings import Settings
from eolie.database_adblock import DatabaseAdblock
from eolie.database_extensions import DatabaseExtensions
from eolie.define import LOGINS

secret = None


def on_get_secret(source, result):
    """
        Store secret proxy
        @param source as GObject.Object
        @param result as Gio.AsyncResult
    """
    global secret
    try:
        secret = Secret.Service.get_finish(result)
    except:
        pass


class Application(Gio.Application):
    def new():
        """
            Return a new application object
        """
        app = Gio.Application.new(None, Gio.ApplicationFlags.IS_SERVICE)
        app.__class__ = Application
        app.cursors = {}
        return app


app = Application.new()
settings = Settings.new()
adblock = DatabaseAdblock()
extensions = DatabaseExtensions()

Secret.Service.get(Secret.ServiceFlags.NONE, None, on_get_secret)


def on_send_request(webpage, request, redirect):
    """
        Filter based on adblock db
        @param webpage as WebKit2WebExtension.WebPage
        @param request as WebKit2.URIRequest
        @param redirect as WebKit2WebExtension.URIResponse
    """
    uri = request.get_uri()
    parsed = urlparse(webpage.get_uri())
    exception = adblock.is_an_exception(parsed.netloc) or\
        adblock.is_an_exception(parsed.netloc + parsed.path)
    if settings.get_value("adblock") and\
            not exception and\
            adblock.is_blocked(uri):
        return True
    return False
    # This code is not working, get_http_headers() kills page loading
    # if settings.get_value("do-not-track"):
    #    headers = request.get_http_headers()
    #    if headers is not None:
    #        headers.append("DNT", "1")


def on_load_secret(source, result, username_input, password_input):
    """
        Set username/password input
        @param source as GObject.Object
        @param result as Gio.AsyncResult
        @param username_input as WebKit2WebExtension.DOMElement
        @param password_input as WebKit2WebExtension.DOMElement
    """
    try:
        secret = source.get_secret()
        attributes = source.get_attributes()
        if secret is not None:
            username_input.set_value(attributes["login"])
            password_input.set_value(secret.get().decode('utf-8'))
    except Exception as e:
        print(e)


def on_secret_search(source, result, username_input, password_input):
    """
        Set username/password input
        @param source as GObject.Object
        @param result as Gio.AsyncResult
        @param username_input as WebKit2WebExtension.DOMElement
        @param password_input as WebKit2WebExtension.DOMElement
    """
    try:
        if result is not None:
            items = secret.search_finish(result)
            if not items:
                return
            items[0].load_secret(None,
                                 on_load_secret,
                                 username_input,
                                 password_input)
    except:
        pass


def on_document_loaded(webpage):
    """
        Restore forms
        @param webpage as WebKit2WebExtension.WebPage
    """
    uri = webpage.get_uri()
    inputs = webpage.get_dom_document().get_elements_by_tag_name('input')
    i = 0
    username_input = None
    password_input = None
    while i < inputs.get_length():
        name = inputs.item(i).get_attribute('name')
        if name is None:
            i += 1
            continue
        if password_input is None and\
                inputs.item(i).get_input_type() == "password":
            password_input = inputs.item(i)
            extensions.add_password(uri, name)
            i += 1
            continue
        if username_input is None and\
                inputs.item(i).get_input_type() != "hidden":
            for search in LOGINS:
                if name.lower().find(search) != -1:
                    username_input = inputs.item(i)
                    break
        i += 1

    if username_input is None or password_input is None:
        return
    parsed = urlparse(uri)
    SecretSchema = {
        "type": Secret.SchemaAttributeType.STRING,
        "uri": Secret.SchemaAttributeType.STRING,
    }
    SecretAttributes = {
        "type": "eolie web login",
        "uri": parsed.netloc,
    }
    schema = Secret.Schema.new("org.gnome.Eolie",
                               Secret.SchemaFlags.NONE,
                               SecretSchema)
    secret.search(schema, SecretAttributes, Secret.ServiceFlags.NONE,
                  None,
                  on_secret_search,
                  username_input,
                  password_input)


def on_page_created(extension, webpage):
    """
        Connect to send request
        @param extension as WebKit2WebExtension
        @param webpage as WebKit2WebExtension.WebPage
    """
    webpage.connect("send-request", on_send_request)
    webpage.connect("document-loaded", on_document_loaded)


def initialize(extension, arguments):
    """
        Connect to page created
        @param extension as WebKit2WebExtension
    """
    extension.connect("page-created", on_page_created)
